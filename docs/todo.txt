- create register file
- start measuring run time, in run.py (via comp_driver.sv)
- fuse LUI and ADDI
- fuse LUI and JALR
- fuse AUIPC and JALR
- fuse DIV and MOD
- parallel instruction execution
- add area approximation to timing.py (eg count the number of cells :P)
- floats:  mul, div, modulus, add, sub, beq, glt
- rename examples....
- matrix multiplication
- verilator driver file
- prime numbers calculator
- maybe use a C/C++ -> RISC-V compiler, instead of writing assembler?
- instruction cache
- level 1 cache
- check endian-ness relative to risc-v spec
- check spir-v vs risc-v
- gpu structure
- opencl
- change bits of address to 64-bit, to allow 16GB+ of memory
- (out of order execution?)
- (use actual memory module?)

done:
- int division
- int modulus
- experiment with migrating most of proc.sv to combinational always @(*) block (from posedge block)
- add cicd to readme
- tested store and load floats
- fout.s; and modify assembler to handle floats for li
- cicd for iverilog reg_test
- cicd for timing
- cicd for verilator compilation
- lui
- change time units to clock cycles
- fix stdout in circleci
- factorial calculator
- int multiplication
- measure timing/maximum clock speed somehow
- handle assigns in timing.py
- [older stuff truncated]

things for gpu:
- get_local_id(), get_global_id()
- barrier
- global mem
- local mem

things to ponder:
- how to read/write registry locking vector?
- use arbiter to request write access to registry file one cycle before writing?
- cases where we want to write:
   - LUI. have the data immediately, no need to wait for anything...
      - mind you, it's usually associated with an ADDI next. can we fuse them? (or bypass?)
   - ADDI. need a cycle to load rs
   - LOAD. need lots of cycles to retrieve from memory. we dont know in advance which cycle the data will arrive, but it
     takes so long, so an extra cycle, who cares?
     - for reading from cache, it's faster, but we probably know better when the data will arrive? (?)
   - DIV: we know when the data will arrive, since we count down the pos
   - various other immediate ops: need at least one cycle to load rs1, rs2    
